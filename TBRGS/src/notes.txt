Make the graph with the road names and location dynamically.
# for main_road in all_roads_array:
#     # Get all nodes that are on a main road
#     main_road_nodes = data_file[data_file['road_1'] == main_road]
#     joined_nodes = data_file[data_file['road_2'] == main_road]
    
#     # Combine the two dataframes
#     road_nodes = pd.concat([main_road_nodes, joined_nodes])

#     iter_count = len(road_nodes)-1

#     # def add_edge(self, from_node, to_node, time_cost):
#     for i in range (iter_count):
#         min_distance = 0
#         if i == 0:
#             scats = temp_road_nodes.iloc[i]['site_id']
#             connected_node = None
            
#         # if ( i == len(road_nodes)-2):
#         #     temp_road_nodes = road_nodes.copy()
            
#         for node in temp_road_nodes['site_id']:
#             if scats == node:
#                 continue
#             d = graph.nodes[scats].distance_to(graph.nodes[node])
#             if d < min_distance or min_distance == 0:
#                 min_distance = d
#                 connected_node = node
        
#         graph.add_edge(scats, connected_node, calculate_travel_time(graph, scats, connected_node, "2006-11-01 00:00"))
#         graph.add_edge(connected_node, scats, calculate_travel_time(graph, connected_node, scats, "2006-11-01 00:00"))
        
#         # print(temp_road_nodes['site_id'], end="step\n")
#         temp_road_nodes.drop(temp_road_nodes[temp_road_nodes['site_id'] == scats].index, inplace=True)
#         scats = connected_node
